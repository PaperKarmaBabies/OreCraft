buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

ext.config = parseConfig(file('build.properties'))
def privateConfig = file('private.properties').exists()
if (privateConfig)
    ext.priv = parseConfig(file('private.properties'))
def tagMatcher = "git tag --contains HEAD".execute().text =~ /v[-\d.]+/
ext["gitTag"] = tagMatcher.count > 0 ? tagMatcher[0] : null
def isRelease() { return project.gitTag == "v${project.version}" && System.getenv("CI") == "true" }
def forgeVersion = "${config.mc_version}-${config.forge_version}${config.forge_branch != '' ? '-' : ''}${config.forge_branch}"

def updateUrl = "https://raw.githubusercontent.com/PaperKarmaBabies/OreCraft/master/metadata/promotions.json"
version = "${config.mc_version}-${config.mod_version}"
if (System.getenv("TRAVIS_BUILD_NUMBER") != null && System.getenv("TRAVIS_BRANCH") != "master") {
    version = "$version+${System.getenv("TRAVIS_BRANCH")}.b${System.getenv("TRAVIS_BUILD_NUMBER")}"
} else if (System.getenv("TRAVIS_BUILD_NUMBER") != null && !isRelease()) {
    version = "$version+b${System.getenv("TRAVIS_BUILD_NUMBER")}"
}
group = 'com.github.paper_karma_babies.orecraft'
archivesBaseName = 'orecraft'

minecraft {
    version = forgeVersion
    runDir = 'run'
    mappings = config.mappings
    useDepAts = true

    replace '@VERSION@', config.mod_version
    replace 'acceptedMinecraftVersions = "*",', """acceptedMinecraftVersions = "[${config.mc_version}]","""
    replace 'required-after:Forge', "required-after:Forge@[${config.forge_version},)"
    replace '@UPDATE_URL@', updateUrl

    replaceIn 'OreCraft.java'
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

dependencies {
    deobfCompile 'ivorius.reccomplex:RecurrentComplex:1.1.1'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', config.mod_version
    inputs.property 'mcversion', config.mc_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version, 'updateUrl': updateUrl
    }

    // copy everything else other than the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def bintrayApi = privateConfig ? priv.bintray_api : System.getenv("PROJECT_BINTRAY_API")
def bintrayUser = privateConfig ? priv.bintray_user : System.getenv("PROJECT_BINTRAY_USER")

if (bintrayApi != null) {
    bintray {
        user = bintrayUser
        key = bintrayApi
        publications = ["OreCraft"]

        pkg {
            repo = "MinecraftMods"
            name = "OreCraft"
            licenses = ["MIT"]
            issueTrackerUrl = 'https://github.com/PaperKarmaBabies/OreCraft/issues'
            vcsUrl = "https://github.com/PaperKarmaBabies/OreCraft.git"
            publicDownloadNumbers = true
            githubRepo = "PaperKarmaBabies/OreCraft"
            publish = true

            version {
                name = project.version
                released = new Date()
                attributes = ["MC Version"        : config.mc_version,
                              "Min. Forge Version": forgeVersion]

                if (isRelease()) {
                    vcsTag = project.gitTag
                }
            }
        }
    }
}

publishing {
    publications {
        OreCraft(MavenPublication) {
            from components.java

            groupId 'com.github.paper_karma_babies.orecraft'
            artifactId 'orecraft'
            version project.version

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

bintrayUpload.dependsOn reobfJar

def cfApi = privateConfig ? priv.cf_api : System.getenv("PROJECT_CURSE_API")
def cfProject = privateConfig ? priv.cf_project : System.getenv("PROJECT_CURSE_PROJECT")
def cfType = privateConfig ? priv.cf_type : System.getenv("PROJECT_CURSE_TYPE")

if (cfApi != null) {
    curseforge {
        def changeFile = file('metadata/changes.json')
        def changes = new JsonSlurper().parseText(changeFile.text)
        def lists = []
        [["additions", "addition"], ["changes", "change"], ["fixes", "fix"]].each {
            def (String key, String label) = it
            if (changes.containsKey(key) && !changes[key].isEmpty()) {
                def list = "<li><b>${key.capitalize()}</b> <ul>"
                changes[key].each {
                    list += "<li>$it</li>"
                }
                list += "</ul></li>"
                lists.add(list)
            }
        }
        def changelogBody = "<ul>${lists.join("\n")}</ul>"

        apiKey = cfApi
        project {
            id = cfProject
            changelogType = 'html'
            changelog = changelogBody
            releaseType = cfType
            addGameVersion config.mc_version

            mainArtifact(jar) {
                displayName = "OreCraft - ${config.mod_version}"
            }
        }
    }

    afterEvaluate {
        curseforge.curseProjects.each { tasks["curseforge${it.id}"].dependsOn bintrayUpload }
    }
}

task release() {
    if (isRelease()) {
        println "Triggering release build"
        dependsOn "curseforge"
    } else
        dependsOn bintrayUpload
}

task generateChangelogs() {
    doLast {
        def changeFile = file('metadata/changes.json')
        def changes = new JsonSlurper().parseText(changeFile.text)
        def promotionFile = file('metadata/promotions.json')
        def promotions = new JsonSlurper().parseText(promotionFile.text)
        def promotionTexts = []
        def lists = []
        [["additions", "addition"], ["changes", "change"], ["fixes", "fix"]].each {
            def (String key, String label) = it
            if (changes.containsKey(key) && !changes[key].isEmpty()) {
                promotionTexts.add(changes[key].collect { "${label.capitalize()}: $it" }.join("\n"))
                def list = "  - **${key.capitalize()}**"
                changes[key].each {
                    list += "\n    - $it"
                }
                lists.add(list)
            }
        }
        def promotionText = promotionTexts.join("\n")
        promotions.promos["${config.mc_version}-latest"] = config.mod_version
        promotions[config.mc_version][config.mod_version] = promotionText
        def newPromos = JsonOutput.prettyPrint(JsonOutput.toJson(promotions))
        promotionFile.text = newPromos
        def changelogFile = file("CHANGELOG.md")
        changelogFile.text = """Changelog
=========

### Version ${config.mod_version} for Minecraft ${config.mc_version}
**Note:** This version of the mod requires at least Forge version *$forgeVersion*.
${lists.join("\n")}
${changelogFile.text.readLines().drop(2).join("\n")}"""
    }
}

tasks.build.dependsOn(release)